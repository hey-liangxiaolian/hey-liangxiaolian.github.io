(window.webpackJsonp=window.webpackJsonp||[]).push([[24],{383:function(t,s,a){"use strict";a.r(s);var e=a(42),n=Object(e.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h4",{attrs:{id:"es6新特性"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#es6新特性"}},[t._v("#")]),t._v(" ES6新特性")]),t._v(" "),a("p",[t._v("参考：https://www.jianshu.com/p/87008f4f8513")]),t._v(" "),a("p",[t._v("https://blog.csdn.net/weixin_43641218/article/details/108396556")]),t._v(" "),a("h4",{attrs:{id:"_1、声明变量"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1、声明变量"}},[t._v("#")]),t._v(" 1、声明变量")]),t._v(" "),a("p",[t._v("​    let\n​    const")]),t._v(" "),a("p",[t._v("关于使用"),a("code",[t._v("let")]),t._v("与"),a("code",[t._v("const")]),t._v("规则:")]),t._v(" "),a("ul",[a("li",[t._v("使用"),a("code",[t._v("let")]),t._v("声明的变量可以重新赋值,但是不能在同一作用域内重新声明")]),t._v(" "),a("li",[t._v("使用"),a("code",[t._v("const")]),t._v("声明的变量必须赋值初始化,但是不能在同一作用域类重新声明也无法重新赋值.")])]),t._v(" "),a("h4",{attrs:{id:"_2、模板字符串"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2、模板字符串"}},[t._v("#")]),t._v(" 2、模板字符串")]),t._v(" "),a("p",[t._v("​    ``")]),t._v(" "),a("p",[t._v("模板字面量本质上是包含嵌入式表达式的字符串字面量.\n模板字面量用倒引号 "),a("code",[t._v("( `` )")]),t._v("表示，可以包含用 "),a("code",[t._v("${expression}")]),t._v(" 表示的占位符")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("let message = `${student.name} please see ${teacher.name} in ${teacher.room} to pick up your report card.`;\n")])])]),a("h4",{attrs:{id:"_3、箭头函数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3、箭头函数"}},[t._v("#")]),t._v(" 3、箭头函数")]),t._v(" "),a("h4",{attrs:{id:"_4、解构"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4、解构"}},[t._v("#")]),t._v(" 4、解构")]),t._v(" "),a("p",[t._v("ES6中允许安装一定模式从数组对象中提取值，然后对变量进行赋值，这样被称之为"),a("strong",[t._v("解构")])]),t._v(" "),a("p",[t._v("在ES6中,可以使用"),a("strong",[t._v("解构")]),t._v("从数组和对象提取值并赋值给独特的变量")]),t._v(" "),a("p",[t._v("解构数组的值:")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("const point = [10, 25, -34];\nconst [x, y, z] = point;\nconsole.log(x, y, z);\n")])])]),a("blockquote",[a("p",[t._v("Prints: 10 25 -34")])]),t._v(" "),a("p",[a("code",[t._v("[]")]),t._v("表示被解构的数组, "),a("code",[t._v("x")]),t._v(","),a("code",[t._v("y")]),t._v(","),a("code",[t._v("z")]),t._v("表示要将数组中的值存储在其中的变量, 在解构数组是, 还可以忽略值, 例如"),a("code",[t._v("const[x,,z]=point")]),t._v(",忽略"),a("code",[t._v("y")]),t._v("坐标.")]),t._v(" "),a("p",[t._v("解构对象中的值:")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("const gemstone = {\n  type: 'quartz',\n  color: 'rose',\n  karat: 21.29\n};\nconst {type, color, karat} = gemstone;\nconsole.log(type, color, karat);\n")])])]),a("p",[t._v("花括号 "),a("code",[t._v("{ }")]),t._v(" 表示被解构的对象，"),a("code",[t._v("type")]),t._v("、"),a("code",[t._v("color")]),t._v(" 和 "),a("code",[t._v("karat")]),t._v(" 表示要将对象中的属性存储到其中的变量")]),t._v(" "),a("h4",{attrs:{id:"_5、promise"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5、promise"}},[t._v("#")]),t._v(" 5、Promise")]),t._v(" "),a("p",[t._v("所谓Promise，简单来说就是容器，里面保存着某个未来才会结束的事件（通常为异步操作）的结果。从语法上说，Promise是一个对象，它可以获取异步操作的消息。Promise提供统一的API，各种异步操作都可以用这样的方式进行处理。")]),t._v(" "),a("p",[t._v("可以通过Promise的构造函数来创建Promise对象，并在内部封装一个异步执行的结果。")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("const promise = new Promise(function (resolve, reject) {\n    // 执行异步操作\n    if (/*异步操作成功*/){\n        // 调用resolve，代表Promise将返回成功的结果\n        resolve(value)\n    }else {\n        // 调用reject，代表Promise将返回错误的结果\n        reject(error)\n    }\n})\n")])])]),a("p",[t._v("如果想用等到"),a("code",[t._v("promise")]),t._v("异步操作执行完成，做一些事情，可以通过"),a("code",[t._v("promise")]),t._v("的"),a("code",[t._v("then()")]),t._v("方法来实现：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("promise.then(function(value)){\n\t// 异步执行成功后的回调\n}\n")])])]),a("p",[t._v("如果想要处理Promise异步执行失败的事件，还可以跟上"),a("code",[t._v("catch")]),t._v("：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("promise.then(function(value)){\n\t// 异步执行成功后的回调\n}.catch(function(error)){\n\t// 异步执行失败后的回调\n}\n")])])]),a("p",[t._v("示例：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('const promise = new Promise(function (resolve, reject) {\n    setTimeout(() =>{\n        const num = Math.random();\n        if (num < 0.5){\n            resolve("success,num:" + num)\n        }else {\n            reject("error,num:" + num)\n        }\n    },300)\n});\n// 调用promise\npromise.then(function (msg) {\n    console.log(msg);\n}).catch(function (msg) {\n    console.log(msg);\n})\n')])])]),a("blockquote",[a("p",[t._v("结果：")]),t._v(" "),a("p",[t._v("success,num:0.07920998734837781")]),t._v(" "),a("p",[t._v("error,num:0.9567763507119988")])]),t._v(" "),a("h4",{attrs:{id:"_6、set和map"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_6、set和map"}},[t._v("#")]),t._v(" 6、set和map")]),t._v(" "),a("p",[t._v("ES6提供了Set和Map的数据结构。")]),t._v(" "),a("h4",{attrs:{id:"set"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#set"}},[t._v("#")]),t._v(" Set")]),t._v(" "),a("p",[a("code",[t._v("Set")]),t._v("本质与数组类似。不同于Set中只能保存不同的元素，如果元素相同会被忽略。和Java中的Set集合非常相似。")]),t._v(" "),a("p",[t._v("构造函数：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("let set = new Set();\nset.add(1);\t// [1]\n\nlet set2 = new Set([1,2,3,4,5])\t// [1,2,3,4,5]\n")])])]),a("p",[t._v("方法：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("// 添加，元素内容不可重复，重复会被忽略\nset.add()\n// 清空\nset.clear()\n// 删除指定元素，删除的是元素内容，而不是下标\nset.delete(value)\n// 判断指定元素是否存在\nset.has(value)\n// 遍历\nset.forEach(function(){})\n// 元素个数\nset.size\n")])])]),a("h4",{attrs:{id:"map"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#map"}},[t._v("#")]),t._v(" Map")]),t._v(" "),a("p",[a("code",[t._v("Map")]),t._v("本质是与Object类似的结构。不同在于Object强制规定key值只能是字符串。而"),a("code",[t._v("Map")]),t._v("对象的key可以是任意对象：")]),t._v(" "),a("ul",[a("li",[t._v("object是"),a("code",[t._v("<String, Object>")]),t._v("集合")]),t._v(" "),a("li",[t._v("map是"),a("code",[t._v("<Object, Object>")]),t._v("集合")])]),t._v(" "),a("p",[t._v("构造函数：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("// map接收一个数组，数组中的元素是键值对数组\nconst map = new Map([\n    ['key1','value1'],\n    ['key2','value2']\n]);\n// 或者接收一个set\nconst set = new Set([\n    ['key3','value3'],\n    ['key4','value4']\n]);\nconst map1 = new Map(map);\nconst map2 = new Map(set);\n\n")])])]),a("p",[t._v("方法：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("map.set(key,value)\nmap.clear()\nmap.delete(key)\nmap.has(key)\nmap.forEach(function(key,value){})\nmap.size\n\nmap.values()\nmap.keys()\nmap.entries()\nfor(let key of map.keys()){\n    console.log(key);\n}\nconsole.log(...map.values())\n\n")])])]),a("h4",{attrs:{id:"_7、for···in-和-for···of"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_7、for···in-和-for···of"}},[t._v("#")]),t._v(" 7、for···in 和 for···of")]),t._v(" "),a("p",[t._v("for...in循环")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("const digits = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9];\n\nfor (const index in digits) {\n  console.log(digits[index]);\n}\n")])])]),a("p",[a("strong",[t._v("依然需要使用 index 来访问数组的值")]),t._v("\n当你需要向数组中添加额外的方法（或另一个对象）时，"),a("code",[t._v("for...in")]),t._v(" 循环会带来很大的麻烦。因为 "),a("code",[t._v("for...in")]),t._v(" 循环循环访问所有"),a("strong",[t._v("可枚举的属性")]),t._v("，意味着如果向数组的"),a("strong",[t._v("原型中添加任何其他属性")]),t._v("，这些属性也会出现在循环中。")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("Array.prototype.decimalfy = function() {\n  for (let i = 0; i < this.length; i++) {\n    this[i] = this[i].toFixed(2);\n  }\n};\n\nconst digits = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9];\n\nfor (const index in digits) {\n  console.log(digits[index]);\n}\n")])])]),a("p",[t._v("for...of循环\n"),a("code",[t._v("for...of")]),t._v(" 循环用于循环访问任何可迭代的数据类型。\n"),a("code",[t._v("for...of")]),t._v(" 循环的编写方式和 "),a("code",[t._v("for...in")]),t._v(" 循环的基本一样，只是将 "),a("code",[t._v("in")]),t._v(" 替换为 "),a("code",[t._v("of")]),t._v("，可以忽略索引。")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("const digits = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9];\n\nfor (const digit of digits) {\n  console.log(digit);\n}\n")])])]),a("blockquote",[a("p",[t._v("建议使用复数对象名称来表示多个值的集合。这样，循环该集合时，可以使用名称的单数版本来表示集合中的单个值。例如，"),a("code",[t._v("for (const button of buttons) {…}")]),t._v("。")])]),t._v(" "),a("p",[a("code",[t._v("for...of")]),t._v(" 循环还具有其他优势，解决了 for 和 for...in 循环的不足之处。你可以随时停止或退出 for...of 循环。")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("for (const digit of digits) {\n  if (digit % 2 === 0) {\n    continue;\n  }\n  console.log(digit);\n}\n")])])]),a("p",[t._v("不用担心向对象中添加新的属性。"),a("strong",[t._v("for...of 循环将只循环访问对象中的值。")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("Array.prototype.decimalfy = function() {\n  for (i = 0; i < this.length; i++) {\n    this[i] = this[i].toFixed(2);\n  }\n};\n\nconst digits = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9];\n\nfor (const digit of digits) {\n  console.log(digit);\n}\n")])])]),a("h4",{attrs:{id:"_8、展开运算符"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_8、展开运算符"}},[t._v("#")]),t._v(" 8、展开运算符")]),t._v(" "),a("p",[a("strong",[t._v("展开运算符")]),t._v("（用三个连续的点 ("),a("code",[t._v("...")]),t._v(") 表示）是 ES6 中的新概念，使你能够将字面量对象展开为多个元素")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('const books = ["Don Quixote", "The Hobbit", "Alice in Wonderland", "Tale of Two Cities"];\nconsole.log(...books);\n')])])]),a("blockquote",[a("p",[t._v("Prints: Don Quixote The Hobbit Alice in Wonderland Tale of Two Cities")])]),t._v(" "),a("p",[t._v("展开运算符的一个用途是结合数组。")]),t._v(" "),a("p",[t._v("如果你需要结合多个数组，在有展开运算符之前，必须使用 "),a("code",[t._v("Array")]),t._v("的 "),a("code",[t._v("concat()")]),t._v(" 方法。")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('const fruits = ["apples", "bananas", "pears"];\nconst vegetables = ["corn", "potatoes", "carrots"];\nconst produce = fruits.concat(vegetables);\nconsole.log(produce);\n')])])]),a("blockquote",[a("p",[t._v('Prints: ["apples", "bananas", "pears", "corn", "potatoes", "carrots"]')])]),t._v(" "),a("p",[t._v("使用展开符来结合数组")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('const fruits = ["apples", "bananas", "pears"];\nconst vegetables = ["corn", "potatoes", "carrots"];\nconst produce = [...fruits,...vegetables];\nconsole.log(produce);\n')])])]),a("p",[a("strong",[t._v("剩余参数(可变参数)")])]),t._v(" "),a("p",[t._v("使用展开运算符将数组展开为多个元素, 使用剩余参数可以将多个元素绑定到一个数组中.\n剩余参数也用三个连续的点 ( "),a("code",[t._v("...")]),t._v(" ) 表示，使你能够将不定数量的元素表示为数组.")]),t._v(" "),a("p",[t._v("用途1: 将变量赋数组值时:")]),t._v(" "),a("div",{staticClass:"language-javascript extra-class"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" order "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("20.17")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("18.67")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1.50")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"cheese"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"eggs"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"milk"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"bread"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("total"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" subtotal"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" tax"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),t._v("items"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" order"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("total"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" subtotal"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" tax"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" items"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[t._v("用途2: 可变参数函数\n对于参数不固定的函数,ES6之前是使用**参数对象(arguments)**处理:")]),t._v(" "),a("div",{staticClass:"language-javascript extra-class"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("sum")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" total "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  \n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" argument "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("of")]),t._v(" arguments"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    total "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+=")]),t._v(" argument"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" total"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("在ES6中使用剩余参数运算符则更为简洁,可读性提高:")]),t._v(" "),a("div",{staticClass:"language-javascript extra-class"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("sum")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),t._v("nums")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" total "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  \n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" num "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("of")]),t._v(" nums"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    total "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+=")]),t._v(" num"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" total"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("h4",{attrs:{id:"_9、类"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_9、类"}},[t._v("#")]),t._v(" 9、类")]),t._v(" "),a("h4",{attrs:{id:"_10、模块化"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_10、模块化"}},[t._v("#")]),t._v(" 10、模块化")]),t._v(" "),a("h4",{attrs:{id:"_11、二进制和八进制字面量"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_11、二进制和八进制字面量"}},[t._v("#")]),t._v(" 11、二进制和八进制字面量")]),t._v(" "),a("h4",{attrs:{id:"_12、proxy"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_12、proxy"}},[t._v("#")]),t._v(" 12、proxy")])])}),[],!1,null,null,null);s.default=n.exports}}]);